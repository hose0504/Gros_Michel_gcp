name: Terraform GCP CI/CD

on:
  push:
    branches: ["main"]
    paths: ["**"]

env:
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ secrets.GCP_REGION }}
  TF_VAR_zone: ${{ secrets.GCP_ZONE }}
  TF_VAR_gcp_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
  TF_VAR_ssh_pub_key: ${{ secrets.SSH_PUB_KEY_PATH }}
  gke_cluster_name: gros-michel-gke-cluster
  DNS_ZONE_NAME: grosmichelus-zone

jobs:
  terraform-apply:
    if: contains(github.event.head_commit.message, 'apply')
    runs-on: ubuntu-latest
    timeout-minutes: 50

    defaults:
      run:
        working-directory: gcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars"

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.gke_cluster_name }}
          location: ${{ env.TF_VAR_region }}
          project_id: ${{ env.TF_VAR_project_id }}

      - name: Get Ingress External IP (via ArgoCD-created Ingress)
        id: get_ingress_ip
        run: |
          echo "🛰️  Waiting for Ingress to get an external IP or hostname..."
          INGRESS_IP=""
          for i in $(seq 1 90); do
            INGRESS_IP=$(kubectl get ingress -A -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -z "$INGRESS_IP" ]; then
              INGRESS_IP=$(kubectl get ingress -A -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            fi
            if [ -n "$INGRESS_IP" ]; then
              echo "✅ External address found: $INGRESS_IP"
              echo "INGRESS_IP=$INGRESS_IP" >> "$GITHUB_OUTPUT"
              break
            fi
            echo "Attempt $i: External IP/hostname not assigned yet. Waiting 10 seconds..."
            sleep 10
          done

          if [ -z "$INGRESS_IP" ]; then
            echo "❌ Timed out while waiting for Ingress IP/hostname."
            kubectl get ingress -A -o yaml || true
            exit 1
          fi

      - name: Update DNS A Record
        run: |
          DOMAIN="grosmichelus.com"
          NEW_IP="${{ steps.get_ingress_ip.outputs.INGRESS_IP }}"
          DNS_ZONE="${{ env.DNS_ZONE_NAME }}"

          echo "Updating A record for $DOMAIN to $NEW_IP in zone $DNS_ZONE..."

          CURRENT_RECORD_JSON=$(gcloud dns record-sets list --zone="$DNS_ZONE" --name="$DOMAIN." --type="A" --format="json" 2>/dev/null)
          CURRENT_IP=$(echo "$CURRENT_RECORD_JSON" | jq -r '.[0].rrdatas[0]' 2>/dev/null)

          if [ -z "$CURRENT_IP" ] || [ "$CURRENT_IP" = "null" ]; then
            echo "No existing A record found. Creating a new one."
            gcloud dns record-sets create "$DOMAIN" \
              --rrdatas="$NEW_IP" \
              --type="A" \
              --ttl="300" \
              --zone="$DNS_ZONE" \
              --project="${{ env.TF_VAR_project_id }}"
          else
            echo "Existing A record is $CURRENT_IP. Updating to $NEW_IP."
            gcloud dns record-sets update "$DOMAIN" \
              --rrdatas="$NEW_IP" \
              --type="A" \
              --ttl="300" \
              --zone="$DNS_ZONE" \
              --project="${{ env.TF_VAR_project_id }}" \
              --old-rrdatas="$CURRENT_IP"
          fi
          echo "DNS A record update complete. It may take time to propagate."

  terraform-destroy:
    if: contains(github.event.head_commit.message, 'destroy')
    runs-on: ubuntu-latest
    timeout-minutes: 50

    defaults:
      run:
        working-directory: gcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Authenticate to Google Cloud and Install gcloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false -var-file="terraform.tfvars"

  no-action:
    if: "!contains(github.event.head_commit.message, 'apply') && !contains(github.event.head_commit.message, 'destroy')"
    runs-on: ubuntu-latest
    steps:
      - name: No action triggered
        run: echo "No 'apply' or 'destroy' in commit message. Skipping."
